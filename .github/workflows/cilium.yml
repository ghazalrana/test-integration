# This is a basic workflow to help you get started with Actions

name: cilium-deployment

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  minikube-setup:
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@master

    - name: Installing Go 
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.5

    - name: Installing Development Tools
      run: |
        cd provision/minikube/github-actions
        ./github-development-tools.sh
        
    - name: Installing Docker    
      uses: docker-practice/actions-setup-docker@master
#     - run: |
#         set -x
#         docker version
#         docker run --rm hello-world



    - name: Installing helm
      uses: WyriHaximus/github-action-helm3@v2.0

    
    - name: Installing minikube
      uses: opsgang/ga-setup-minikube@v0.1.2
      with:
        minikube-version: 1.21.0
        k8s-version: 1.20.7


    - name: Starting Minikube 
      run: |
        minikube config set vm-driver docker
        minikube config set kubernetes-version v1.20.7
        minikube start --network-plugin=cni --memory=4096
        minikube ssh -- sudo mount bpffs -t bpf /sys/fs/bpf
        kubectl cluster-info
        kubectl wait --for=condition=Ready pods --all -n kube-system  --timeout=5m
        kubectl get pods -n kube-system


      
    - name: Deploying Cilium 1.10
      run: |
        cd provision/minikube/github-actions
        ./github-cilium-deploy.sh
        kubectl wait --for=condition=Ready pods --all -n kube-system  --timeout=15m
        kubectl get pods -n kube-system

    - name: Deploying Cilium-CLI
      run: |
        cd provision/minikube/github-actions
        ./github-cilium-cli-deploy.sh
        cilium status


    - name: Running Connectivity Test
      run: cilium connectivity test
        
 
  Linting:
#     if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@master
      
    - name: Cloning Cilium & Cilium-Cli
      run: |
        git clone https://github.com/cilium/cilium-cli.git 
        git clone https://github.com/cilium/cilium.git
      
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2.5.2
      with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
#         version: v1.40.1

        working-directory: cilium
        
#         only-new-issues: true

        # Optional: if set to true then the action don't cache or restore ~/go/pkg.
        skip-pkg-cache: true

        # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
        skip-build-cache: true



#     - name: Labels-dependent L4 Rule
#       run: |
#         cd provision/minikube/github-actions
#         ./limit-port-l4-policy.sh


#     - name: installing Docker  
#       run: |
#         DEBIAN_FRONTEND=noninteractive sudo apt-get update && \
#         curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && \
#         sudo add-apt-repository \
#         "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable" && \
#         DEBIAN_FRONTEND=noninteractive sudo apt-get update && \
#         DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
#         containerd.io \
#         docker-ce \
#         docker-ce-cli \
#         docker-compose && \
#         sudo usermod -aG docker $USER && newgrp docker

# Minikube without using github-actions

#     - name: Starting Minikube   
#       run: |
#         curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && \
#         sudo install minikube-linux-amd64 /usr/local/bin/minikube 
#         minikube start --network-plugin=cni
#         minikube ssh -- sudo mount bpffs -t bpf /sys/fs/bpf
#         kubectl wait --for=condition=Ready pods --all -n kube-system  --timeout=5m
#         kubectl get pods -n kube-system
      
